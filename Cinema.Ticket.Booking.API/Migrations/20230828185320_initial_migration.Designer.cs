// <auto-generated />
using System;
using Cinema.Ticket.Booking.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cinema.Ticket.Booking.API.Migrations
{
    [DbContext(typeof(CinemaTicketBookingDbContext))]
    [Migration("20230828185320_initial_migration")]
    partial class initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<string>("Genre")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Batman need description?",
                            Duration = 2.5,
                            Genre = "Crime",
                            Title = "Batman"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Superman need description?",
                            Duration = 3.0,
                            Genre = "Adventure",
                            Title = "Superman"
                        });
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SeatId")
                        .HasColumnType("integer");

                    b.Property<int>("ShowtimeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShowtimeId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ReservationId")
                        .HasColumnType("integer");

                    b.Property<string>("SeatNumber")
                        .HasColumnType("text");

                    b.Property<int>("TheaterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("TheaterId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SeatNumber = "A-1",
                            TheaterId = 1
                        },
                        new
                        {
                            Id = 2,
                            SeatNumber = "A-2",
                            TheaterId = 1
                        },
                        new
                        {
                            Id = 3,
                            SeatNumber = "B-1",
                            TheaterId = 1
                        },
                        new
                        {
                            Id = 4,
                            SeatNumber = "B-2",
                            TheaterId = 1
                        },
                        new
                        {
                            Id = 5,
                            SeatNumber = "A-1",
                            TheaterId = 2
                        },
                        new
                        {
                            Id = 6,
                            SeatNumber = "A-2",
                            TheaterId = 2
                        },
                        new
                        {
                            Id = 7,
                            SeatNumber = "B-1",
                            TheaterId = 2
                        },
                        new
                        {
                            Id = 8,
                            SeatNumber = "B-2",
                            TheaterId = 2
                        });
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Showtime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("TheaterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("TheaterId");

                    b.ToTable("ShowTimes");
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Theater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Theaters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = "Somewhere in Berlin",
                            Name = "Basic"
                        },
                        new
                        {
                            Id = 2,
                            Location = "Somewhere in Berlin",
                            Name = "IMAX"
                        });
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Reservation", b =>
                {
                    b.HasOne("Cinema.Ticket.Booking.API.Models.Showtime", "Showtime")
                        .WithMany("Reservations")
                        .HasForeignKey("ShowtimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Showtime");
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Seat", b =>
                {
                    b.HasOne("Cinema.Ticket.Booking.API.Models.Reservation", null)
                        .WithMany("ReservedSeats")
                        .HasForeignKey("ReservationId");

                    b.HasOne("Cinema.Ticket.Booking.API.Models.Theater", "Theater")
                        .WithMany("Seats")
                        .HasForeignKey("TheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Showtime", b =>
                {
                    b.HasOne("Cinema.Ticket.Booking.API.Models.Movie", "Movie")
                        .WithMany("Showtimes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Ticket.Booking.API.Models.Theater", "Theater")
                        .WithMany("Showtimes")
                        .HasForeignKey("TheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Movie", b =>
                {
                    b.Navigation("Showtimes");
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Reservation", b =>
                {
                    b.Navigation("ReservedSeats");
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Showtime", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Cinema.Ticket.Booking.API.Models.Theater", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Showtimes");
                });
#pragma warning restore 612, 618
        }
    }
}
